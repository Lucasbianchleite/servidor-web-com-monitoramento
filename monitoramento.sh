#!/bin/bash
# Define que o script ser√° executado pelo interpretador Bash

# ==============================
# CONFIGURA√á√ïES
# ==============================
SITE_URL="http://192.168.15.10"  
# Endere√ßo do site/servidor que ser√° monitorado

WEBHOOK_URL="https://discord.com/api/webhooks/1403424219403915344/looPMmd9kLnZ0ss6l0vTwYREtyt11Esl5_4Z4lx9Zp2MBBeXazPHiLit1BjIUeXVxmSs"
# URL do webhook do Discord que receber√° alertas

LOG_FILE="/var/log/monitoramento.log"
# Caminho do arquivo de log local onde o script vai registrar eventos

DATA=$(date '+%Y-%m-%d %H:%M:%S')
# Vari√°vel que armazena a data/hora atual para incluir nos logs

# ==============================
# FUN√á√ÉO √öNICA PARA LOG + DISCORD
# ==============================
log_discord() {
    local log_msg="$1"       # Mensagem que ser√° registrada no arquivo de log
    local discord_msg="$2"   # Mensagem que ser√° enviada para o Discord

    echo "$DATA - $log_msg" >> "$LOG_FILE"
    # Adiciona a mensagem no arquivo de log junto com a data/hora

    curl -s -H "Content-Type: application/json" \
         -X POST \
         -d "{\"content\": \"$discord_msg\"}" \
         "$WEBHOOK_URL" >/dev/null
    # Envia a mensagem para o webhook do Discord
    # -s: modo silencioso (n√£o mostra sa√≠da)
    # >/dev/null: ignora sa√≠da do curl
}

# ==============================
# VERIFICA√á√ÉO DO SITE
# ==============================
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL")
# Faz uma requisi√ß√£o HTTP ao site
# -s: silencioso
# -o /dev/null: descarta o conte√∫do da resposta
# -w "%{http_code}": captura apenas o c√≥digo HTTP retornado (200, 404, etc.)

if [ "$HTTP_CODE" -ne 200 ]; then
    # Se o c√≥digo HTTP n√£o for 200 (ou seja, site indispon√≠vel)

    log_discord "üö® Site OFFLINE! C√≥digo HTTP: $HTTP_CODE" \
                "üö® **ALERTA CR√çTICO!**\nüõë O servidor **$SITE_URL** n√£o est√° respondendo!\nüìÖ **Data/Hora:** $DATA\nüì° **C√≥digo HTTP:** \`$HTTP_CODE\`\n‚ö° Tentando recupera√ß√£o autom√°tica..."
    # Registra no log e envia mensagem de alerta ao Discord

    sudo systemctl start nginx
    # Tenta iniciar/reiniciar o servi√ßo Nginx

    sleep 3
    # Aguarda 3 segundos para o servi√ßo iniciar

    STATUS=$(systemctl is-active nginx)
    # Verifica o status atual do Nginx
    # Retorna "active" se estiver rodando, outro valor se n√£o

    if [ "$STATUS" == "active" ]; then
        log_discord "‚úÖ Nginx reiniciado com sucesso." \
                    "‚úÖ **Recupera√ß√£o bem-sucedida!**\nüíª O servi√ßo **Nginx** foi reiniciado e o site deve estar **ONLINE** novamente.\nüìÖ **Data/Hora:** $DATA\nüöÄ Status atual: \`$STATUS\`"
        # Se voltou a funcionar, envia alerta positivo
    else
        log_discord "‚ùå Falha ao reiniciar o Nginx." \
                    "‚ùå **Falha grave!**\n‚ö†Ô∏è O script tentou reiniciar o **Nginx**, mas n√£o obteve sucesso.\nüìÖ **Data/Hora:** $DATA\nüí° **A√ß√£o necess√°ria:** Interven√ß√£o manual imediata."
        # Se n√£o voltou, envia alerta de falha
    fi

else
    echo "$DATA - üü¢ Site online. C√≥digo HTTP: $HTTP_CODE" >> "$LOG_FILE"
    # Se o site est√° online (HTTP 200), registra apenas no log
fi

